{
  "general/addVariable": "import Koxy from \"../../../processor/main.ts\";\nimport ParamUiOptions from \"../../../types/param-ui.ts\";\n\ntype Params = {\n  key: string;\n  value: unknown;\n  mutable: boolean;\n};\n\nconst _name = \"Add variable\";\nconst _icon = \"text\";\nconst _description = \"Add a global variable\";\n\nconst _param_key_ui: ParamUiOptions = {\n  \"placeholder\": \"Enter variable key...\",\n};\n\nconst _param_value_ui: ParamUiOptions = {\n  \"placeholder\": \"Enter variable value...\",\n};\n\nconst _param_mutable_ui: ParamUiOptions = {\n  \"placeholder\": \"Can the variable value be mutated..?\",\n};\n\nexport default async function addVariable(\n  { key, value, mutable }: Params,\n  window: Koxy,\n) {\n  const exist = window.variables.get(key) || { mutable: true };\n  if (!exist.mutable) {\n    await window.processResult(window, {\n      success: false,\n      err: `Can not mutate the immutable variable \"${key}\"`,\n    });\n    return;\n  }\n\n  try {\n    value = JSON.parse(value as string);\n  } catch (_err: unknown) {\n    (() => {});\n  }\n\n  window.variables.set(key, {\n    value: value,\n    mutable: mutable || false,\n  });\n\n  await window.processResult(window, {\n    success: true,\n  });\n}\n",
  "general/arrayToText": "import Koxy from \"../../../processor/main.ts\";\nimport ParamUiOptions from \"../../../types/param-ui.ts\";\n\ntype Params = {\n  value: string[] | number[];\n  joinOn: string;\n};\n\nconst _name = \"Array to text\";\nconst _icon = \"list\";\nconst _description = \"Join array to text\";\nconst _hasResult = true;\nconst _result = \"string\";\n\nconst _param_value_ui: ParamUiOptions = {\n  \"placeholder\": \"Enter array...\",\n};\n\nconst _param_splitOn_ui: ParamUiOptions = {\n  \"placeholder\": \"Enter delimiter...\",\n};\n\nexport default async function arrayToText(\n  { value, joinOn }: Params,\n  window: Koxy,\n) {\n  try {\n    const newValue = value.join(joinOn);\n    await window.processResult(window, {\n      success: true,\n      result: newValue,\n    });\n  } catch (_err: unknown) {\n    await window.processResult(window, {\n      success: false,\n      err: _err as string,\n    });\n  }\n}\n",
  "general/logger": "import Koxy from \"../../../processor/main.ts\";\nimport ParamUiOptions from \"../../../types/param-ui.ts\";\n\ntype Params = {\n  value: unknown;\n};\n\nconst _name = \"Logger\";\nconst _icon = \"list\";\nconst _description = \"Log something to the console\";\n\nconst _param_value_ui: ParamUiOptions = {\n  \"placeholder\": \"The value to log\",\n};\n\nconst log = (value: unknown) => {\n  return value;\n};\n\nexport default function logger({ value }: Params, window: Koxy): void {\n  // console.log(value);\n  log(value);\n\n  window.processResult(window, {\n    success: true,\n  });\n}\n",
  "general/parseJSON": "import Koxy from \"../../../processor/main.ts\";\nimport ParamUiOptions from \"../../../types/param-ui.ts\";\n\ntype Params = {\n  value: unknown;\n};\n\nconst _name = \"Parse JSON\";\nconst _icon = \"code-dots\";\nconst _description = \"Parse data to JSON\";\nconst _hasResult = true;\nconst _result = \"object\";\n\nconst _param_value_ui: ParamUiOptions = {\n  \"placeholder\": \"Enter value to parse...\",\n};\n\nexport default async function parseJSON(\n  { value }: Params,\n  window: Koxy,\n) {\n  if (typeof value === \"object\") {\n    await window.processResult(window, {\n      success: true,\n      result: value,\n    });\n    return;\n  }\n\n  try {\n    value = JSON.parse(value as string);\n    await window.processResult(window, {\n      success: true,\n      result: value,\n    });\n  } catch (_err: unknown) {\n    await window.processResult(window, {\n      success: false,\n      err: _err as string,\n    });\n  }\n}\n",
  "general/responseStatus": "import Koxy from \"../../../processor/main.ts\";\nimport ParamUiOptions from \"../../../types/param-ui.ts\";\n\ntype Params = {\n  code: number;\n};\n\nconst _name = \"Response status\";\nconst _icon = \"text\";\nconst _description = \"Change the response status code.\";\n\nconst _param_code_ui: ParamUiOptions = {\n  \"type\": \"number\",\n  \"placeholder\": \"Enter status code...\",\n};\n\n// change the response status code\nexport default async function responseStatus(\n  { code }: Params,\n  window: Koxy,\n) {\n  if (typeof code !== \"number\") {\n    code = parseInt(code);\n  }\n\n  if (isNaN(code)) {\n    await window.processResult(window, {\n      success: false,\n      err: \"Invalid status code\",\n    });\n    return;\n  }\n\n  window.status = code;\n  await window.processResult(window, {\n    success: true,\n  });\n}\n",
  "general/stringifyJSON": "import Koxy from \"../../../processor/main.ts\";\nimport ParamUiOptions from \"../../../types/param-ui.ts\";\n\ntype Params = {\n  value: object;\n};\n\nconst _name = \"Stringify JSON\";\nconst _icon = \"code-minus\";\nconst _description = \"Stringify JSON to string\";\nconst _hasResult = true;\nconst _result = \"string\";\n\nconst _param_value_ui: ParamUiOptions = {\n  \"placeholder\": \"Enter value to Stringify...\",\n};\n\nexport default async function parseJSON(\n  { value }: Params,\n  window: Koxy,\n) {\n  try {\n    const stringValue = JSON.stringify(value);\n    await window.processResult(window, {\n      success: true,\n      result: stringValue,\n    });\n  } catch (_err: unknown) {\n    await window.processResult(window, {\n      success: false,\n      err: _err as string,\n    });\n  }\n}\n",
  "general/textToArray": "import Koxy from \"../../../processor/main.ts\";\nimport ParamUiOptions from \"../../../types/param-ui.ts\";\n\ntype Params = {\n  value: string;\n  splitOn: string;\n};\n\nconst _name = \"Text to array\";\nconst _icon = \"brackets\";\nconst _description = \"Make array from text\";\nconst _hasResult = true;\nconst _result = \"array\";\n\nconst _param_value_ui: ParamUiOptions = {\n  \"placeholder\": \"Enter text to make array...\",\n};\n\nconst _param_splitOn_ui: ParamUiOptions = {\n  \"placeholder\": \"Enter delimiter...\",\n};\n\nexport default async function textToArray(\n  { value, splitOn }: Params,\n  window: Koxy,\n) {\n  try {\n    const arr = value.split(splitOn);\n    await window.processResult(window, {\n      success: true,\n      result: arr,\n    });\n  } catch (_err: unknown) {\n    await window.processResult(window, {\n      success: false,\n      err: _err as string,\n    });\n  }\n}\n"
}
